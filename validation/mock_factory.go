// Code generated by mockery v2.15.0. DO NOT EDIT.

package validation

import mock "github.com/stretchr/testify/mock"

// mockFactory is an autogenerated mock type for the factory type
type mockFactory struct {
	mock.Mock
}

// All provides a mock function with given fields:
func (_m *mockFactory) All() []Validator {
	ret := _m.Called()

	var r0 []Validator
	if rf, ok := ret.Get(0).(func() []Validator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Validator)
		}
	}

	return r0
}

// Select provides a mock function with given fields: name
func (_m *mockFactory) Select(name string) Validator {
	ret := _m.Called(name)

	var r0 Validator
	if rf, ok := ret.Get(0).(func(string) Validator); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Validator)
		}
	}

	return r0
}

// With provides a mock function with given fields: validators
func (_m *mockFactory) With(validators []Validator) factory {
	ret := _m.Called(validators)

	var r0 factory
	if rf, ok := ret.Get(0).(func([]Validator) factory); ok {
		r0 = rf(validators)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(factory)
		}
	}

	return r0
}

type mockConstructorTestingTnewMockFactory interface {
	mock.TestingT
	Cleanup(func())
}

// newMockFactory creates a new instance of mockFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockFactory(t mockConstructorTestingTnewMockFactory) *mockFactory {
	mock := &mockFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
